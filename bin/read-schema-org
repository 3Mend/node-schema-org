#!/usr/bin/env node

var fs = require('fs'),
    exec = require('child_process').exec,
    path = require('path'),
    spawn = require('child_process').spawn,
    neuron = require('neuron'),
    winston = require('winston').cli();

var schemaDir = path.join(__dirname, '..', 'schemas'),
    allSchemas = path.join(schemaDir, 'schema-list.json');

function streamChild (params, callback) {
  winston.info('Spawning: node ' + params.join(' ').yellow);
  
  var child = spawn('node', params);
  
  child.stdout.on('data', function (data) {
    process.stdout.write(data.toString());
  });
  
  child.stderr.on('data', function (data) {
    process.stdout.write(data.toString());
  });
  
  child.on('exit', function () {
    winston.info('node ' + params.join(' ').yellow + ' has exited.');
    callback();
  });
}

winston.warn('Removing all schemas in ' + schemaDir.magenta);
exec('rm -rf ' + schemaDir, function () {
  streamChild([path.join(__dirname, '..', 'list-schemas.js')], function () {
    fs.readFile(allSchemas, function (err, data) {
      if (err) {
        return winston.error('Error reading schemas: ' + err.message);
      }

      var schemas = JSON.parse(data.toString()).schemas,
          manager = new neuron.JobManager({ concurrency: 75 }),
          completed = 0;

      manager.addJob('readSchema', {
        work: function (schema) {
          var that = this,
              readOptions;
              
          readOptions = [
            path.join(__dirname, '..', 'read-schema.js'), 
            '--type', 
            schema
          ];
            
          streamChild(readOptions, function () {
            that.finished = true;
          });
        }
      });

      manager.on('finish', function (job, worker) {
        completed += 1;

        if (completed === schemas.length) {
          winston.info('');
          winston.info('Done parsing all schemas from ' + 'schema.org'.magenta);
          winston.info('They are located in: ' + schemaDir.magenta);
          winston.info('');
        }
      });

      schemas.forEach(function (schema) {
        manager.enqueue('readSchema', schema);
      });
    });
  });
});